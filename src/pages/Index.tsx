import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

interface Task {
  id: string;
  text: string;
  completed: boolean;
  priority: 'low' | 'medium' | 'high';
  category: string;
}

interface Note {
  id: string;
  title: string;
  text: string;
  timestamp: string;
  tags: string[];
}

interface SmartDevice {
  id: string;
  name: string;
  type: 'light' | 'climate' | 'security' | 'media';
  status: boolean;
  value?: number;
}

const Index = () => {
  const [isActive, setIsActive] = useState(false);
  const [activeWindow, setActiveWindow] = useState<string | null>(null);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [notes, setNotes] = useState<Note[]>([]);
  const [devices, setDevices] = useState<SmartDevice[]>([
    { id: '1', name: '–ì–æ—Å—Ç–∏–Ω–∞—è', type: 'light', status: false, value: 80 },
    { id: '2', name: '–°–ø–∞–ª—å–Ω—è', type: 'light', status: false, value: 50 },
    { id: '3', name: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', type: 'climate', status: false, value: 22 },
    { id: '4', name: '–û—Ö—Ä–∞–Ω–∞', type: 'security', status: true, value: 100 },
  ]);
  const [timerSeconds, setTimerSeconds] = useState(0);
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  const [newTask, setNewTask] = useState('');
  const [newNote, setNewNote] = useState({ title: '', text: '', tags: '' });
  const [searchQuery, setSearchQuery] = useState('');
  const [calcInput, setCalcInput] = useState('');
  const [calcResult, setCalcResult] = useState('');
  const [weatherData] = useState({ temp: 23, condition: '–Ø—Å–Ω–æ', humidity: 65 });
  const [musicVolume, setMusicVolume] = useState([50]);
  const [systemStats, setSystemStats] = useState({ cpu: 45, ram: 62, disk: 78 });
  const [isListening, setIsListening] = useState(false);
  const [voiceTranscript, setVoiceTranscript] = useState('');
  const [voiceEnabled, setVoiceEnabled] = useState(true);
  const { toast } = useToast();

  const speak = (text: string) => {
    if (!voiceEnabled || !('speechSynthesis' in window)) return;
    
    window.speechSynthesis.cancel();
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    utterance.rate = 1.1;
    utterance.pitch = 1.2;
    utterance.volume = 1.0;
    
    const voices = window.speechSynthesis.getVoices();
    const femaleVoice = voices.find(voice => 
      voice.lang.includes('ru') && 
      (voice.name.toLowerCase().includes('female') || 
       voice.name.toLowerCase().includes('woman') ||
       voice.name.toLowerCase().includes('anna') ||
       voice.name.toLowerCase().includes('elena') ||
       voice.name.toLowerCase().includes('irina') ||
       voice.name.toLowerCase().includes('milena'))
    );
    
    const russianVoice = femaleVoice || voices.find(voice => voice.lang.includes('ru'));
    
    if (russianVoice) {
      utterance.voice = russianVoice;
    }
    
    window.speechSynthesis.speak(utterance);
  };

  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isTimerRunning && timerSeconds > 0) {
      interval = setInterval(() => {
        setTimerSeconds(prev => {
          if (prev <= 1) {
            setIsTimerRunning(false);
            speak('–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ.');
            toast({
              title: "‚è∞ –¢–ê–ô–ú–ï–† –ó–ê–í–ï–†–®–Å–ù",
              description: "–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!",
            });
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isTimerRunning, timerSeconds, toast, voiceEnabled]);

  useEffect(() => {
    const statsInterval = setInterval(() => {
      setSystemStats({
        cpu: Math.floor(Math.random() * 30) + 40,
        ram: Math.floor(Math.random() * 20) + 50,
        disk: 78
      });
    }, 2000);
    return () => clearInterval(statsInterval);
  }, []);

  useEffect(() => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      return;
    }

    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'ru-RU';

    recognition.onresult = (event: any) => {
      const transcript = Array.from(event.results)
        .map((result: any) => result[0])
        .map((result: any) => result.transcript)
        .join('');
      
      setVoiceTranscript(transcript);
      
      if (event.results[event.results.length - 1].isFinal) {
        processVoiceCommand(transcript.toLowerCase());
      }
    };

    recognition.onerror = () => {
      setIsListening(false);
    };

    recognition.onend = () => {
      if (isListening) {
        recognition.start();
      }
    };

    if (isListening) {
      recognition.start();
    } else {
      recognition.stop();
    }

    return () => {
      recognition.stop();
    };
  }, [isListening]);

  const processVoiceCommand = (command: string) => {
    if (command.includes('–∞–Ω–æ–º–∞–ª–∏—è') || command.includes('–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å')) {
      if (!isActive) {
        setIsActive(true);
        speak('–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.');
        toast({ title: 'üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞', description: '–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' });
      }
    }
    
    if (command.includes('–∑–∞–¥–∞—á') || command.includes('–∑–∞–¥–∞—á–∏')) {
      setActiveWindow('tasks');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–¥–∞—á–∏' });
    }
    
    if (command.includes('–∑–∞–º–µ—Ç–∫')) {
      setActiveWindow('notes');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–µ—Ç–∫–∏');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–µ—Ç–∫–∏' });
    }
    
    if (command.includes('—Ç–∞–π–º–µ—Ä')) {
      setActiveWindow('timer');
      speak('–ó–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é —Ç–∞–π–º–µ—Ä' });
    }
    
    if (command.includes('—É–º–Ω—ã–π –¥–æ–º') || command.includes('–¥–æ–º')) {
      setActiveWindow('smart-home');
      speak('–ê–∫—Ç–∏–≤–∏—Ä—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –¥–æ–º–æ–º');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é —É–º–Ω—ã–π –¥–æ–º' });
    }
    
    if (command.includes('–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä') || command.includes('–ø–æ—Å—á–∏—Ç–∞–π')) {
      setActiveWindow('calculator');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' });
    }
    
    if (command.includes('–ø–æ–≥–æ–¥')) {
      setActiveWindow('weather');
      speak(`–ü–æ–≥–æ–¥–∞: ${weatherData.temp} –≥—Ä–∞–¥—É—Å–æ–≤, ${weatherData.condition.toLowerCase()}`);
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–≥–æ–¥—É' });
    }
    
    if (command.includes('–Ω–æ–≤–æ—Å—Ç')) {
      setActiveWindow('news');
      speak('–ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç–∏' });
    }
    
    if (command.includes('–ø–µ—Ä–µ–≤–æ–¥') || command.includes('–ø–µ—Ä–µ–≤–µ–¥–∏')) {
      setActiveWindow('translate');
      speak('–ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫' });
    }
    
    if (command.includes('–º—É–∑—ã–∫')) {
      setActiveWindow('music');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –º—É–∑—ã–∫—É' });
    }
    
    if (command.includes('–∏–≥—Ä') || command.includes('gaming')) {
      setActiveWindow('gaming');
      speak('–ê–∫—Ç–∏–≤–∏—Ä—É—é –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º');
      toast({ title: 'üé§ –ê–∫—Ç–∏–≤–∏—Ä—É—é –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º' });
    }
    
    if (command.includes('–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç') || command.includes('—Å–≤–µ—Ç')) {
      const lightDevice = devices.find(d => d.type === 'light');
      if (lightDevice) {
        toggleDevice(lightDevice.id);
        speak('–°–≤–µ—Ç –≤–∫–ª—é—á—ë–Ω');
        toast({ title: 'üé§ –°–≤–µ—Ç –≤–∫–ª—é—á—ë–Ω' });
      }
    }
    
    if (command.includes('–∑–∞–∫—Ä–æ–π') || command.includes('–∑–∞–∫—Ä—ã—Ç—å')) {
      setActiveWindow(null);
      speak('–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
      toast({ title: 'üé§ –û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ' });
    }
    
    if (command.includes('–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É')) {
      const taskText = command.replace(/–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É/gi, '').trim();
      if (taskText) {
        setTasks([...tasks, { 
          id: Date.now().toString(), 
          text: taskText, 
          completed: false,
          priority: 'medium',
          category: 'general'
        }]);
        speak(`–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${taskText}`);
        toast({ title: 'üé§ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', description: taskText });
      }
    }
    
    if (command.includes('–≤—Ä–µ–º—è') || command.includes('–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å')) {
      const now = new Date();
      const hours = now.getHours();
      const minutes = now.getMinutes();
      speak(`–°–µ–π—á–∞—Å ${hours} —á–∞—Å–æ–≤ ${minutes} –º–∏–Ω—É—Ç`);
      toast({ title: 'üé§ –í—Ä–µ–º—è', description: `${hours}:${minutes.toString().padStart(2, '0')}` });
    }
    
    if (command.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') || command.includes('—Å–∏—Å—Ç–µ–º–∞')) {
      speak(`–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ ${systemStats.cpu} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ ${systemStats.ram} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤`);
      toast({ title: 'üé§ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', description: `CPU: ${systemStats.cpu}%, RAM: ${systemStats.ram}%` });
    }
  };

  const toggleVoiceListening = () => {
    const newState = !isListening;
    setIsListening(newState);
    if (newState) {
      speak('–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—ã.');
    } else {
      speak('–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.');
    }
    toast({
      title: newState ? 'üé§ –ì–û–õ–û–°–û–í–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï' : 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω',
      description: newState ? '–°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—ã...' : '–ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',
    });
  };

  const toggleVoiceResponses = () => {
    const newState = !voiceEnabled;
    setVoiceEnabled(newState);
    if (newState) {
      speak('–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã');
    }
    toast({
      title: newState ? 'üîä –ì–æ–ª–æ—Å –≤–∫–ª—é—á—ë–Ω' : 'üîá –ì–æ–ª–æ—Å –≤—ã–∫–ª—é—á–µ–Ω',
      description: newState ? '–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º' : '–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
    });
  };

  const handleActivate = () => {
    setIsActive(!isActive);
    toast({
      title: isActive ? "–ê–ù–û–ú–ê–õ–ò–Ø –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê" : "–ê–ù–û–ú–ê–õ–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê",
      description: isActive ? "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è" : "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ–Ω–ª–∞–π–Ω. –ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.",
    });
  };

  const addTask = (priority: 'low' | 'medium' | 'high' = 'medium') => {
    if (newTask.trim()) {
      setTasks([...tasks, { 
        id: Date.now().toString(), 
        text: newTask, 
        completed: false,
        priority,
        category: 'general'
      }]);
      setNewTask('');
      toast({
        title: "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
        description: newTask,
      });
    }
  };

  const toggleTask = (id: string) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const deleteTask = (id: string) => {
    setTasks(tasks.filter(task => task.id !== id));
  };

  const addNote = () => {
    if (newNote.title.trim() && newNote.text.trim()) {
      setNotes([...notes, { 
        id: Date.now().toString(), 
        title: newNote.title,
        text: newNote.text, 
        timestamp: new Date().toLocaleString('ru-RU'),
        tags: newNote.tags.split(',').map(t => t.trim()).filter(t => t)
      }]);
      setNewNote({ title: '', text: '', tags: '' });
      toast({
        title: "üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
        description: newNote.title,
      });
    }
  };

  const toggleDevice = (id: string) => {
    setDevices(devices.map(device => 
      device.id === id ? { ...device, status: !device.status } : device
    ));
    const device = devices.find(d => d.id === id);
    if (device) {
      toast({
        title: device.status ? `${device.name} –≤—ã–∫–ª—é—á–µ–Ω` : `${device.name} –≤–∫–ª—é—á—ë–Ω`,
        description: `–°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª—ë–Ω`,
      });
    }
  };

  const updateDeviceValue = (id: string, value: number) => {
    setDevices(devices.map(device => 
      device.id === id ? { ...device, value } : device
    ));
  };

  const startTimer = (minutes: number) => {
    setTimerSeconds(minutes * 60);
    setIsTimerRunning(true);
    toast({
      title: "‚è±Ô∏è –¢–ê–ô–ú–ï–† –ó–ê–ü–£–©–ï–ù",
      description: `${minutes} –º–∏–Ω—É—Ç –Ω–∞ —Å—á—ë—Ç—á–∏–∫–µ`,
    });
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const calculate = () => {
    try {
      const result = eval(calcInput);
      setCalcResult(result.toString());
      toast({
        title: "üßÆ –†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω",
        description: `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`,
      });
    } catch {
      setCalcResult('–û—à–∏–±–∫–∞');
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞",
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
      });
    }
  };

  const Window = ({ id, title, icon, children, width = 'w-[600px]' }: { 
    id: string; 
    title: string; 
    icon: string; 
    children: React.ReactNode;
    width?: string;
  }) => {
    if (activeWindow !== id) return null;
    
    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm animate-fade-in">
        <Card className={`${width} max-h-[80vh] overflow-auto bg-card/95 border-2 border-primary/60 neon-box`}>
          <div className="sticky top-0 z-10 bg-card/95 border-b border-primary/30 p-4 flex items-center justify-between backdrop-blur-sm">
            <div className="flex items-center gap-3">
              <Icon name={icon as any} size={24} className="text-primary" />
              <h2 className="text-xl font-bold text-primary">{title}</h2>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setActiveWindow(null)}
              className="text-secondary hover:text-secondary hover:bg-secondary/10"
            >
              <Icon name="X" size={20} />
            </Button>
          </div>
          <div className="p-6">
            {children}
          </div>
        </Card>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-[#0A0A0E] via-[#1a1a2e] to-[#0A0A0E] relative overflow-hidden">
      <div className="absolute inset-0 opacity-10">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-primary rounded-full blur-[120px] animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-secondary rounded-full blur-[120px] animate-pulse"></div>
        <div className="absolute top-1/2 left-1/2 w-96 h-96 bg-accent rounded-full blur-[120px] animate-pulse"></div>
      </div>

      <div className="scan-line"></div>

      <div className="relative z-10 min-h-screen flex flex-col">
        <header className="border-b border-primary/20 bg-card/30 backdrop-blur-md">
          <div className="container mx-auto px-6 py-4 flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="w-10 h-10 rounded-full border-2 border-primary neon-box flex items-center justify-center animate-pulse">
                <Icon name="Cpu" size={24} className="text-primary" />
              </div>
              <div>
                <h1 className="text-2xl font-black text-transparent bg-clip-text bg-gradient-to-r from-primary via-secondary to-accent tracking-wider">
                  –ê–ù–û–ú–ê–õ–ò–Ø
                </h1>
                <p className="text-xs text-muted-foreground">Desktop OS v2.0</p>
              </div>
            </div>

            <div className="flex items-center gap-6">
              <div className="flex items-center gap-2 text-sm">
                <Icon name="Thermometer" size={16} className="text-secondary" />
                <span className="text-foreground">{weatherData.temp}¬∞C</span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <Icon name="Clock" size={16} className="text-accent" />
                <span className="text-foreground">{new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</span>
              </div>
              <Button
                onClick={toggleVoiceResponses}
                size="sm"
                variant="ghost"
                className="text-muted-foreground hover:text-foreground"
                title="–í–∫–ª/–≤—ã–∫–ª –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã"
              >
                <Icon name={voiceEnabled ? "Volume2" : "VolumeX"} size={20} />
              </Button>
              <Button
                onClick={toggleVoiceListening}
                size="sm"
                className={`px-6 font-bold border-2 transition-all ${
                  isListening
                    ? 'bg-secondary text-black border-secondary shadow-[0_0_20px_rgba(255,0,110,0.6)] animate-pulse' 
                    : 'bg-transparent text-secondary border-secondary/50 hover:border-secondary'
                }`}
              >
                <Icon name="Mic" size={16} className="mr-2" />
                {isListening ? '–°–õ–£–®–ê–Æ' : '–ì–û–õ–û–°'}
              </Button>
              <Button
                onClick={handleActivate}
                size="sm"
                className={`px-6 font-bold border-2 transition-all ${
                  isActive 
                    ? 'bg-primary text-black border-primary shadow-[0_0_20px_rgba(0,255,240,0.6)]' 
                    : 'bg-transparent text-primary border-primary/50 hover:border-primary'
                }`}
              >
                {isActive ? (
                  <>
                    <Icon name="Zap" size={16} className="mr-2" />
                    –ê–ö–¢–ò–í–ù–ê
                  </>
                ) : (
                  <>
                    <Icon name="Power" size={16} className="mr-2" />
                    –ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨
                  </>
                )}
              </Button>
            </div>
          </div>
        </header>

        {isActive && (
          <>
            <main className="flex-1 container mx-auto px-6 py-8">
              {isListening && voiceTranscript && (
                <div className="mb-6 animate-fade-in">
                  <Card className="bg-secondary/20 border-2 border-secondary/60 neon-box p-4">
                    <div className="flex items-center gap-3">
                      <Icon name="Mic" size={24} className="text-secondary pulse-glow" />
                      <div className="flex-1">
                        <p className="text-xs text-muted-foreground mb-1">–†–∞—Å–ø–æ–∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—É...</p>
                        <p className="text-lg text-foreground font-medium">{voiceTranscript}</p>
                      </div>
                    </div>
                  </Card>
                </div>
              )}
              <div className="mb-8">
                <Card className="bg-card/80 border-2 border-primary/40 neon-box p-6">
                  <div className="relative">
                    <Input
                      type="text"
                      placeholder="–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: —Ñ–∞–π–ª—ã, –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-full bg-input border-2 border-primary/50 text-foreground text-lg py-6 pl-12 pr-4"
                    />
                    <Icon name="Search" size={24} className="absolute left-4 top-1/2 -translate-y-1/2 text-primary" />
                  </div>
                </Card>
              </div>

              <div className="grid grid-cols-4 gap-6 mb-8">
                <Card className="bg-card/80 border-2 border-primary/40 neon-box p-6">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-muted-foreground">CPU</span>
                    <span className="text-primary font-bold">{systemStats.cpu}%</span>
                  </div>
                  <Progress value={systemStats.cpu} className="h-2" />
                </Card>

                <Card className="bg-card/80 border-2 border-secondary/40 neon-box p-6">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-muted-foreground">RAM</span>
                    <span className="text-secondary font-bold">{systemStats.ram}%</span>
                  </div>
                  <Progress value={systemStats.ram} className="h-2" />
                </Card>

                <Card className="bg-card/80 border-2 border-accent/40 neon-box p-6">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-muted-foreground">DISK</span>
                    <span className="text-accent font-bold">{systemStats.disk}%</span>
                  </div>
                  <Progress value={systemStats.disk} className="h-2" />
                </Card>

                <Card className="bg-card/80 border-2 border-primary/40 neon-box p-6">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-muted-foreground">–ó–∞–¥–∞—á</span>
                    <span className="text-primary font-bold">{tasks.filter(t => !t.completed).length}</span>
                  </div>
                  <Progress value={(tasks.filter(t => t.completed).length / Math.max(tasks.length, 1)) * 100} className="h-2" />
                </Card>
              </div>

              <div className="grid grid-cols-5 gap-6">
                <Card 
                  onClick={() => setActiveWindow('tasks')}
                  className="bg-card/80 border-2 border-primary/40 neon-box p-8 hover:scale-105 hover:border-primary transition-all cursor-pointer"
                >
                  <Icon name="CheckSquare" size={56} className="text-primary mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-primary text-center mb-2">–ó–∞–¥–∞—á–∏</h3>
                  <p className="text-muted-foreground text-sm text-center">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞–º–∏</p>
                </Card>

                <Card 
                  onClick={() => setActiveWindow('notes')}
                  className="bg-card/80 border-2 border-secondary/40 neon-box p-8 hover:scale-105 hover:border-secondary transition-all cursor-pointer"
                >
                  <Icon name="StickyNote" size={56} className="text-secondary mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-secondary text-center mb-2">–ó–∞–º–µ—Ç–∫–∏</h3>
                  <p className="text-muted-foreground text-sm text-center">–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø–∏—Å–∏</p>
                </Card>

                <Card 
                  onClick={() => setActiveWindow('timer')}
                  className="bg-card/80 border-2 border-accent/40 neon-box p-8 hover:scale-105 hover:border-accent transition-all cursor-pointer"
                >
                  <Icon name="Timer" size={56} className="text-accent mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-accent text-center mb-2">–¢–∞–π–º–µ—Ä—ã</h3>
                  <p className="text-muted-foreground text-sm text-center">–û—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏</p>
                </Card>

                <Card 
                  onClick={() => setActiveWindow('smart-home')}
                  className="bg-card/80 border-2 border-primary/40 neon-box p-8 hover:scale-105 hover:border-primary transition-all cursor-pointer"
                >
                  <Icon name="Home" size={56} className="text-primary mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-primary text-center mb-2">–£–º–Ω—ã–π –î–æ–º</h3>
                  <p className="text-muted-foreground text-sm text-center">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ IoT</p>
                </Card>

                <Card 
                  onClick={() => setActiveWindow('calculator')}
                  className="bg-card/80 border-2 border-secondary/40 neon-box p-8 hover:scale-105 hover:border-secondary transition-all cursor-pointer"
                >
                  <Icon name="Calculator" size={56} className="text-secondary mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-secondary text-center mb-2">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h3>
                  <p className="text-muted-foreground text-sm text-center">–†–∞—Å—á—ë—Ç—ã</p>
                </Card>

                <Card 
                  onClick={() => setActiveWindow('weather')}
                  className="bg-card/80 border-2 border-accent/40 neon-box p-8 hover:scale-105 hover:border-accent transition-all cursor-pointer"
                >
                  <Icon name="Cloud" size={56} className="text-accent mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-accent text-center mb-2">–ü–æ–≥–æ–¥–∞</h3>
                  <p className="text-muted-foreground text-sm text-center">–ü—Ä–æ–≥–Ω–æ–∑</p>
                </Card>

                <Card 
                  onClick={() => setActiveWindow('news')}
                  className="bg-card/80 border-2 border-primary/40 neon-box p-8 hover:scale-105 hover:border-primary transition-all cursor-pointer"
                >
                  <Icon name="Newspaper" size={56} className="text-primary mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-primary text-center mb-2">–ù–æ–≤–æ—Å—Ç–∏</h3>
                  <p className="text-muted-foreground text-sm text-center">–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ</p>
                </Card>

                <Card 
                  onClick={() => setActiveWindow('translate')}
                  className="bg-card/80 border-2 border-secondary/40 neon-box p-8 hover:scale-105 hover:border-secondary transition-all cursor-pointer"
                >
                  <Icon name="Languages" size={56} className="text-secondary mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-secondary text-center mb-2">–ü–µ—Ä–µ–≤–æ–¥—ã</h3>
                  <p className="text-muted-foreground text-sm text-center">–Ø–∑—ã–∫–∏ –º–∏—Ä–∞</p>
                </Card>

                <Card 
                  onClick={() => setActiveWindow('music')}
                  className="bg-card/80 border-2 border-accent/40 neon-box p-8 hover:scale-105 hover:border-accent transition-all cursor-pointer"
                >
                  <Icon name="Music" size={56} className="text-accent mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-accent text-center mb-2">–ú—É–∑—ã–∫–∞</h3>
                  <p className="text-muted-foreground text-sm text-center">–ü–ª–µ–µ—Ä</p>
                </Card>

                <Card 
                  onClick={() => setActiveWindow('gaming')}
                  className="bg-card/80 border-2 border-primary/40 neon-box p-8 hover:scale-105 hover:border-primary transition-all cursor-pointer"
                >
                  <Icon name="Gamepad2" size={56} className="text-primary mb-4 pulse-glow mx-auto" />
                  <h3 className="text-xl font-bold text-primary text-center mb-2">Gaming</h3>
                  <p className="text-muted-foreground text-sm text-center">–†–µ–∂–∏–º –∏–≥—Ä—ã</p>
                </Card>
              </div>
            </main>

            <Window id="tasks" title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ó–∞–¥–∞—á–∞–º–∏" icon="CheckSquare" width="w-[700px]">
              <div className="space-y-6">
                <div className="flex gap-4">
                  <Input
                    type="text"
                    placeholder="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞..."
                    value={newTask}
                    onChange={(e) => setNewTask(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && addTask()}
                    className="flex-1 bg-input border-2 border-primary/50 py-6"
                  />
                  <Button onClick={() => addTask('high')} className="bg-secondary text-black px-6">
                    <Icon name="AlertCircle" size={18} className="mr-2" />
                    –í–∞–∂–Ω–∞—è
                  </Button>
                  <Button onClick={() => addTask('medium')} className="bg-accent text-black px-6">
                    <Icon name="Plus" size={18} className="mr-2" />
                    –û–±—ã—á–Ω–∞—è
                  </Button>
                </div>

                <div className="space-y-3">
                  {tasks.length === 0 ? (
                    <div className="text-center py-12 text-muted-foreground">
                      <Icon name="ListTodo" size={48} className="mx-auto mb-4 opacity-50" />
                      <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</p>
                    </div>
                  ) : (
                    tasks.map((task) => (
                      <Card
                        key={task.id}
                        className={`p-4 border-2 transition-all ${
                          task.completed
                            ? 'bg-muted/30 border-muted/50 opacity-60'
                            : task.priority === 'high'
                            ? 'bg-card/80 border-secondary/40 neon-box'
                            : 'bg-card/80 border-primary/40 neon-box'
                        }`}
                      >
                        <div className="flex items-center gap-4">
                          <button
                            onClick={() => toggleTask(task.id)}
                            className={`w-6 h-6 rounded border-2 flex items-center justify-center transition-all ${
                              task.completed
                                ? 'bg-primary border-primary'
                                : 'border-primary/50 hover:border-primary'
                            }`}
                          >
                            {task.completed && <Icon name="Check" size={16} className="text-black" />}
                          </button>
                          <p className={`flex-1 ${task.completed ? 'line-through text-muted-foreground' : 'text-foreground font-medium'}`}>
                            {task.text}
                          </p>
                          {task.priority === 'high' && !task.completed && (
                            <Badge className="bg-secondary text-black">–í–∞–∂–Ω–æ</Badge>
                          )}
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => deleteTask(task.id)}
                            className="text-secondary hover:text-secondary hover:bg-secondary/10"
                          >
                            <Icon name="Trash2" size={18} />
                          </Button>
                        </div>
                      </Card>
                    ))
                  )}
                </div>
              </div>
            </Window>

            <Window id="notes" title="–ë—ã—Å—Ç—Ä—ã–µ –ó–∞–º–µ—Ç–∫–∏" icon="StickyNote" width="w-[800px]">
              <div className="space-y-6">
                <div className="space-y-4">
                  <Input
                    type="text"
                    placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏..."
                    value={newNote.title}
                    onChange={(e) => setNewNote({ ...newNote, title: e.target.value })}
                    className="bg-input border-2 border-secondary/50 py-4"
                  />
                  <Textarea
                    placeholder="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏..."
                    value={newNote.text}
                    onChange={(e) => setNewNote({ ...newNote, text: e.target.value })}
                    className="bg-input border-2 border-secondary/50 min-h-[120px]"
                  />
                  <div className="flex gap-4">
                    <Input
                      type="text"
                      placeholder="–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)..."
                      value={newNote.tags}
                      onChange={(e) => setNewNote({ ...newNote, tags: e.target.value })}
                      className="flex-1 bg-input border-2 border-secondary/50"
                    />
                    <Button onClick={addNote} className="bg-secondary text-black px-8">
                      <Icon name="Save" size={18} className="mr-2" />
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </Button>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  {notes.length === 0 ? (
                    <div className="col-span-2 text-center py-12 text-muted-foreground">
                      <Icon name="FileText" size={48} className="mx-auto mb-4 opacity-50" />
                      <p>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫</p>
                    </div>
                  ) : (
                    notes.map((note) => (
                      <Card key={note.id} className="bg-card/80 border-2 border-secondary/40 neon-box p-6">
                        <h4 className="text-lg font-bold text-secondary mb-2">{note.title}</h4>
                        <p className="text-foreground mb-3 text-sm">{note.text}</p>
                        <div className="flex flex-wrap gap-2 mb-2">
                          {note.tags.map((tag, i) => (
                            <Badge key={i} variant="outline" className="text-xs border-secondary/50 text-secondary">
                              #{tag}
                            </Badge>
                          ))}
                        </div>
                        <p className="text-xs text-muted-foreground">{note.timestamp}</p>
                      </Card>
                    ))
                  )}
                </div>
              </div>
            </Window>

            <Window id="timer" title="–¢–∞–π–º–µ—Ä—ã –∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" icon="Timer">
              <div className="space-y-6">
                {timerSeconds > 0 && (
                  <div className="text-center">
                    <div className="text-7xl font-black text-transparent bg-clip-text bg-gradient-to-r from-accent via-primary to-secondary neon-glow mb-6">
                      {formatTime(timerSeconds)}
                    </div>
                    <Button
                      onClick={() => setIsTimerRunning(!isTimerRunning)}
                      className="bg-accent text-black px-8 py-4 font-bold"
                    >
                      <Icon name={isTimerRunning ? "Pause" : "Play"} size={20} className="mr-2" />
                      {isTimerRunning ? '–ü–∞—É–∑–∞' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
                    </Button>
                  </div>
                )}

                <div className="grid grid-cols-3 gap-4">
                  {[1, 5, 10, 15, 25, 30, 45, 60, 90].map((minutes) => (
                    <Button
                      key={minutes}
                      onClick={() => startTimer(minutes)}
                      className="bg-card border-2 border-accent/50 hover:border-accent hover:bg-accent/10 py-6 text-lg font-bold"
                    >
                      {minutes} –º–∏–Ω
                    </Button>
                  ))}
                </div>
              </div>
            </Window>

            <Window id="smart-home" title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –£–º–Ω—ã–º –î–æ–º–æ–º" icon="Home" width="w-[700px]">
              <div className="space-y-4">
                {devices.map((device) => (
                  <Card key={device.id} className="bg-card/80 border-2 border-primary/40 neon-box p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-4">
                        <Icon 
                          name={device.type === 'light' ? 'Lightbulb' : device.type === 'climate' ? 'Thermometer' : device.type === 'security' ? 'Shield' : 'Tv'} 
                          size={32} 
                          className={device.status ? 'text-primary' : 'text-muted-foreground'} 
                        />
                        <div>
                          <h4 className="text-lg font-bold text-foreground">{device.name}</h4>
                          <p className="text-sm text-muted-foreground">
                            {device.type === 'light' && '–û—Å–≤–µ—â–µ–Ω–∏–µ'}
                            {device.type === 'climate' && '–ö–ª–∏–º–∞—Ç'}
                            {device.type === 'security' && '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'}
                            {device.type === 'media' && '–ú–µ–¥–∏–∞'}
                          </p>
                        </div>
                      </div>
                      <Switch checked={device.status} onCheckedChange={() => toggleDevice(device.id)} />
                    </div>
                    {device.status && device.value !== undefined && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">
                            {device.type === 'light' && '–Ø—Ä–∫–æ—Å—Ç—å'}
                            {device.type === 'climate' && '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'}
                          </span>
                          <span className="text-primary font-bold">
                            {device.type === 'climate' ? `${device.value}¬∞C` : `${device.value}%`}
                          </span>
                        </div>
                        <Slider
                          value={[device.value]}
                          onValueChange={(val) => updateDeviceValue(device.id, val[0])}
                          max={device.type === 'climate' ? 30 : 100}
                          min={device.type === 'climate' ? 16 : 0}
                          step={1}
                        />
                      </div>
                    )}
                  </Card>
                ))}
              </div>
            </Window>

            <Window id="calculator" title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" icon="Calculator">
              <div className="space-y-6">
                <Input
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ..."
                  value={calcInput}
                  onChange={(e) => setCalcInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && calculate()}
                  className="bg-input border-2 border-secondary/50 text-2xl py-6 text-center"
                />
                {calcResult && (
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç:</p>
                    <p className="text-5xl font-black text-transparent bg-clip-text bg-gradient-to-r from-primary to-secondary neon-glow">
                      {calcResult}
                    </p>
                  </div>
                )}
                <Button onClick={calculate} className="w-full bg-secondary text-black py-6 text-lg font-bold">
                  <Icon name="Equal" size={20} className="mr-2" />
                  –í—ã—á–∏—Å–ª–∏—Ç—å
                </Button>
              </div>
            </Window>

            <Window id="weather" title="–ü—Ä–æ–≥–Ω–æ–∑ –ü–æ–≥–æ–¥—ã" icon="Cloud">
              <div className="text-center space-y-6">
                <div className="text-8xl mb-4">‚òÄÔ∏è</div>
                <div>
                  <p className="text-6xl font-black text-transparent bg-clip-text bg-gradient-to-r from-accent to-primary neon-glow mb-2">
                    {weatherData.temp}¬∞C
                  </p>
                  <p className="text-2xl text-foreground font-medium mb-1">{weatherData.condition}</p>
                  <p className="text-muted-foreground">–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weatherData.humidity}%</p>
                </div>
                <div className="grid grid-cols-3 gap-4 mt-6">
                  <Card className="bg-card/80 border border-accent/30 p-4">
                    <p className="text-sm text-muted-foreground mb-2">–ó–∞–≤—Ç—Ä–∞</p>
                    <p className="text-3xl mb-1">üå§Ô∏è</p>
                    <p className="text-xl font-bold text-accent">25¬∞C</p>
                  </Card>
                  <Card className="bg-card/80 border border-accent/30 p-4">
                    <p className="text-sm text-muted-foreground mb-2">–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</p>
                    <p className="text-3xl mb-1">‚õÖ</p>
                    <p className="text-xl font-bold text-accent">22¬∞C</p>
                  </Card>
                  <Card className="bg-card/80 border border-accent/30 p-4">
                    <p className="text-sm text-muted-foreground mb-2">–í—Ç–æ—Ä–Ω–∏–∫</p>
                    <p className="text-3xl mb-1">üåßÔ∏è</p>
                    <p className="text-xl font-bold text-accent">18¬∞C</p>
                  </Card>
                </div>
              </div>
            </Window>

            <Window id="news" title="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ù–æ–≤–æ—Å—Ç–∏" icon="Newspaper" width="w-[800px]">
              <div className="space-y-4">
                {['–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ —Å—Ñ–µ—Ä–µ –ò–ò', '–ü—Ä–æ—Ä—ã–≤ –≤ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö', '–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –º–∏—Å—Å–∏–∏'].map((title, i) => (
                  <Card key={i} className="bg-card/80 border-2 border-primary/40 neon-box p-6 cursor-pointer hover:scale-105 transition-transform">
                    <h4 className="text-lg font-bold text-primary mb-2">{title}</h4>
                    <p className="text-muted-foreground text-sm mb-3">
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore.
                    </p>
                    <p className="text-xs text-muted-foreground">{new Date().toLocaleDateString('ru-RU')}</p>
                  </Card>
                ))}
              </div>
            </Window>

            <Window id="translate" title="–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫" icon="Languages">
              <div className="space-y-4">
                <Textarea
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞..."
                  className="bg-input border-2 border-secondary/50 min-h-[120px]"
                />
                <div className="flex gap-4">
                  <Button className="flex-1 bg-secondary text-black">RU ‚Üí EN</Button>
                  <Button className="flex-1 bg-accent text-black">EN ‚Üí RU</Button>
                </div>
                <Card className="bg-muted border border-primary/30 p-6">
                  <p className="text-foreground">–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</p>
                </Card>
              </div>
            </Window>

            <Window id="music" title="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ü–ª–µ–µ—Ä" icon="Music">
              <div className="space-y-6">
                <Card className="bg-card/80 border-2 border-accent/40 p-8 text-center">
                  <div className="text-6xl mb-4">üéµ</div>
                  <h3 className="text-2xl font-bold text-accent mb-2">Neon Dreams</h3>
                  <p className="text-muted-foreground mb-6">Synthwave Collection</p>
                  <div className="flex justify-center gap-4 mb-6">
                    <Button variant="ghost" size="lg">
                      <Icon name="SkipBack" size={24} />
                    </Button>
                    <Button size="lg" className="bg-accent text-black w-16 h-16 rounded-full">
                      <Icon name="Play" size={28} />
                    </Button>
                    <Button variant="ghost" size="lg">
                      <Icon name="SkipForward" size={24} />
                    </Button>
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm text-muted-foreground">
                      <span>2:34</span>
                      <span>4:12</span>
                    </div>
                    <Slider value={[60]} max={100} />
                  </div>
                </Card>
                <div className="flex items-center gap-4">
                  <Icon name="Volume2" size={20} className="text-accent" />
                  <Slider value={musicVolume} onValueChange={setMusicVolume} max={100} />
                  <span className="text-sm text-foreground w-12">{musicVolume[0]}%</span>
                </div>
              </div>
            </Window>

            <Window id="gaming" title="–ò–≥—Ä–æ–≤–æ–π –†–µ–∂–∏–º" icon="Gamepad2">
              <div className="space-y-6">
                <Card className="bg-card/80 border-2 border-primary/40 neon-box p-6 text-center">
                  <Icon name="Gamepad2" size={64} className="text-primary mx-auto mb-4 pulse-glow" />
                  <h3 className="text-2xl font-bold text-primary mb-4">–†–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</h3>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-foreground">–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</span>
                      <Badge className="bg-primary text-black">–í–ö–õ</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-foreground">–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</span>
                      <Badge className="bg-primary text-black">–í–ö–õ</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-foreground">Boost FPS</span>
                      <Badge className="bg-primary text-black">–í–ö–õ</Badge>
                    </div>
                  </div>
                </Card>
              </div>
            </Window>
          </>
        )}

        <footer className="border-t border-primary/20 bg-card/30 backdrop-blur-md py-4">
          <div className="container mx-auto px-6 flex items-center justify-between">
            <p className="text-xs text-muted-foreground">
              ANOMALY DESKTOP OS v2.0 ‚Ä¢ {isActive ? 'SYSTEM STATUS: ' : ''} 
              <span className={isActive ? "text-primary font-bold" : "text-muted-foreground"}>
                {isActive ? 'ONLINE' : 'STANDBY'}
              </span>
            </p>
            {timerSeconds > 0 && (
              <div className="flex items-center gap-2 text-sm">
                <Icon name="Timer" size={16} className="text-accent" />
                <span className="text-accent font-bold">{formatTime(timerSeconds)}</span>
              </div>
            )}
          </div>
        </footer>
      </div>
    </div>
  );
};

export default Index;