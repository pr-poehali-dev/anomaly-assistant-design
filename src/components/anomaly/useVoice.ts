import { useEffect } from 'react';
import { Task, SmartDevice, WeatherData, SystemStats } from './types';

interface UseVoiceProps {
  isListening: boolean;
  setIsListening: (value: boolean) => void;
  setVoiceTranscript: (value: string) => void;
  voiceEnabled: boolean;
  isActive: boolean;
  setIsActive: (value: boolean) => void;
  setActiveWindow: (value: string | null) => void;
  weatherData: WeatherData;
  systemStats: SystemStats;
  devices: SmartDevice[];
  tasks: Task[];
  setTasks: (tasks: Task[]) => void;
  toggleDevice: (id: string) => void;
  speak: (text: string) => void;
  toast: any;
}

export const useVoice = ({
  isListening,
  setIsListening,
  setVoiceTranscript,
  voiceEnabled,
  isActive,
  setIsActive,
  setActiveWindow,
  weatherData,
  systemStats,
  devices,
  tasks,
  setTasks,
  toggleDevice,
  speak,
  toast,
}: UseVoiceProps) => {
  const processVoiceCommand = (command: string) => {
    if (command.includes('–∞–Ω–æ–º–∞–ª–∏—è') || command.includes('–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å')) {
      if (!isActive) {
        setIsActive(true);
        speak('–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.');
        toast({ title: 'üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞', description: '–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' });
      }
    }

    if (command.includes('–¥–µ–∞–∫—Ç–∏–≤–∏—Ä') || command.includes('–≤—ã–∫–ª—é—á')) {
      if (isActive) {
        setIsActive(false);
        speak('–°–∏—Å—Ç–µ–º–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        toast({ title: 'üé§ –°–∏—Å—Ç–µ–º–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞' });
      }
    }
    
    if (command.includes('–∑–∞–¥–∞—á') || command.includes('–∑–∞–¥–∞—á–∏')) {
      setActiveWindow('tasks');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–¥–∞—á–∏' });
    }
    
    if (command.includes('–∑–∞–º–µ—Ç–∫')) {
      setActiveWindow('notes');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–µ—Ç–∫–∏');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–µ—Ç–∫–∏' });
    }
    
    if (command.includes('—Ç–∞–π–º–µ—Ä')) {
      setActiveWindow('timer');
      speak('–ó–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é —Ç–∞–π–º–µ—Ä' });
    }

    if (command.includes('–∫–∞–ª–µ–Ω–¥–∞—Ä')) {
      setActiveWindow('calendar');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å' });
    }
    
    if (command.includes('—É–º–Ω—ã–π –¥–æ–º') || command.includes('–¥–æ–º')) {
      setActiveWindow('smart-home');
      speak('–ê–∫—Ç–∏–≤–∏—Ä—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –¥–æ–º–æ–º');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é —É–º–Ω—ã–π –¥–æ–º' });
    }
    
    if (command.includes('–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä') || command.includes('–ø–æ—Å—á–∏—Ç–∞–π')) {
      setActiveWindow('calculator');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' });
    }
    
    if (command.includes('–ø–æ–≥–æ–¥')) {
      setActiveWindow('weather');
      speak(`–ü–æ–≥–æ–¥–∞: ${weatherData.temp} –≥—Ä–∞–¥—É—Å–æ–≤, ${weatherData.condition.toLowerCase()}`);
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–≥–æ–¥—É' });
    }
    
    if (command.includes('–Ω–æ–≤–æ—Å—Ç')) {
      setActiveWindow('news');
      speak('–ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç–∏' });
    }
    
    if (command.includes('–ø–µ—Ä–µ–≤–æ–¥') || command.includes('–ø–µ—Ä–µ–≤–µ–¥–∏')) {
      setActiveWindow('translate');
      speak('–ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫' });
    }
    
    if (command.includes('–º—É–∑—ã–∫')) {
      setActiveWindow('music');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –º—É–∑—ã–∫—É' });
    }

    if (command.includes('—Ñ–∞–π–ª')) {
      setActiveWindow('files');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é —Ñ–∞–π–ª—ã' });
    }

    if (command.includes('—á–∞—Ç') || command.includes('—Å–æ–æ–±—â–µ–Ω–∏')) {
      setActiveWindow('chat');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é —á–∞—Ç');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é —á–∞—Ç' });
    }

    if (command.includes('–ø–æ—á—Ç') || command.includes('email')) {
      setActiveWindow('email');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –ø–æ—á—Ç—É');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ—á—Ç—É' });
    }

    if (command.includes('–∫–∞—Ä—Ç')) {
      setActiveWindow('maps');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –∫–∞—Ä—Ç—ã');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –∫–∞—Ä—Ç—ã' });
    }

    if (command.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫')) {
      setActiveWindow('settings');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' });
    }

    if (command.includes('–∫–∞–º–µ—Ä')) {
      setActiveWindow('camera');
      speak('–ê–∫—Ç–∏–≤–∏—Ä—É—é –∫–∞–º–µ—Ä—É');
      toast({ title: 'üé§ –ê–∫—Ç–∏–≤–∏—Ä—É—é –∫–∞–º–µ—Ä—É' });
    }

    if (command.includes('—Ç–µ—Ä–º–∏–Ω–∞–ª') || command.includes('–∫–æ–Ω—Å–æ–ª')) {
      setActiveWindow('terminal');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é —Ç–µ—Ä–º–∏–Ω–∞–ª');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é —Ç–µ—Ä–º–∏–Ω–∞–ª' });
    }

    if (command.includes('—Ä–µ–¥–∞–∫—Ç–æ—Ä') || command.includes('–∫–æ–¥')) {
      setActiveWindow('code');
      speak('–ó–∞–ø—É—Å–∫–∞—é —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞');
      toast({ title: 'üé§ –ó–∞–ø—É—Å–∫–∞—é —Ä–µ–¥–∞–∫—Ç–æ—Ä' });
    }

    if (command.includes('–∑–¥–æ—Ä–æ–≤')) {
      setActiveWindow('health');
      speak('–û—Ç–∫—Ä—ã–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è');
      toast({ title: 'üé§ –û—Ç–∫—Ä—ã–≤–∞—é –∑–¥–æ—Ä–æ–≤—å–µ' });
    }
    
    if (command.includes('–∏–≥—Ä') || command.includes('gaming')) {
      setActiveWindow('gaming');
      speak('–ê–∫—Ç–∏–≤–∏—Ä—É—é –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º');
      toast({ title: 'üé§ –ê–∫—Ç–∏–≤–∏—Ä—É—é –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º' });
    }
    
    if (command.includes('–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç') || command.includes('—Å–≤–µ—Ç –≤–∫–ª')) {
      const lightDevice = devices.find(d => d.type === 'light' && !d.status);
      if (lightDevice) {
        toggleDevice(lightDevice.id);
        speak('–°–≤–µ—Ç –≤–∫–ª—é—á—ë–Ω');
        toast({ title: 'üé§ –°–≤–µ—Ç –≤–∫–ª—é—á—ë–Ω' });
      }
    }

    if (command.includes('–≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç') || command.includes('—Å–≤–µ—Ç –≤—ã–∫–ª')) {
      const lightDevice = devices.find(d => d.type === 'light' && d.status);
      if (lightDevice) {
        toggleDevice(lightDevice.id);
        speak('–°–≤–µ—Ç –≤—ã–∫–ª—é—á—ë–Ω');
        toast({ title: 'üé§ –°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω' });
      }
    }

    if (command.includes('–≤–∫–ª—é—á–∏ –≤—Å–µ')) {
      devices.forEach(d => {
        if (!d.status) toggleDevice(d.id);
      });
      speak('–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã');
      toast({ title: 'üé§ –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã' });
    }

    if (command.includes('–≤—ã–∫–ª—é—á–∏ –≤—Å–µ')) {
      devices.forEach(d => {
        if (d.status) toggleDevice(d.id);
      });
      speak('–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–∫–ª—é—á–µ–Ω—ã');
      toast({ title: 'üé§ –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–∫–ª—é—á–µ–Ω—ã' });
    }

    if (command.includes('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä')) {
      speak(`–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${weatherData.temp} –≥—Ä–∞–¥—É—Å–æ–≤`);
      toast({ title: 'üé§ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', description: `${weatherData.temp}¬∞C` });
    }
    
    if (command.includes('–∑–∞–∫—Ä–æ–π') || command.includes('–∑–∞–∫—Ä—ã—Ç—å')) {
      setActiveWindow(null);
      speak('–û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
      toast({ title: 'üé§ –û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ' });
    }

    if (command.includes('–∑–∞–∫—Ä–æ–π –≤—Å–µ')) {
      setActiveWindow(null);
      speak('–í—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã');
      toast({ title: 'üé§ –í—Å–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã' });
    }
    
    if (command.includes('–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É')) {
      const taskText = command.replace(/–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É/gi, '').trim();
      if (taskText) {
        setTasks([...tasks, { 
          id: Date.now().toString(), 
          text: taskText, 
          completed: false,
          priority: 'medium',
          category: 'general'
        }]);
        speak(`–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${taskText}`);
        toast({ title: 'üé§ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', description: taskText });
      }
    }

    if (command.includes('—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á')) {
      const activeCount = tasks.filter(t => !t.completed).length;
      speak(`–£ –≤–∞—Å ${activeCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á`);
      toast({ title: 'üé§ –ó–∞–¥–∞—á–∏', description: `${activeCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö` });
    }

    if (command.includes('—É–¥–∞–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏')) {
      setTasks([]);
      speak('–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã');
      toast({ title: 'üé§ –í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã' });
    }
    
    if (command.includes('–≤—Ä–µ–º—è') || command.includes('–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å')) {
      const now = new Date();
      const hours = now.getHours();
      const minutes = now.getMinutes();
      speak(`–°–µ–π—á–∞—Å ${hours} —á–∞—Å–æ–≤ ${minutes} –º–∏–Ω—É—Ç`);
      toast({ title: 'üé§ –í—Ä–µ–º—è', description: `${hours}:${minutes.toString().padStart(2, '0')}` });
    }

    if (command.includes('–¥–∞—Ç–∞') || command.includes('–∫–∞–∫–æ–µ —á–∏—Å–ª–æ')) {
      const now = new Date();
      const date = now.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });
      speak(`–°–µ–≥–æ–¥–Ω—è ${date}`);
      toast({ title: 'üé§ –î–∞—Ç–∞', description: date });
    }

    if (command.includes('–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏')) {
      const now = new Date();
      const day = now.toLocaleDateString('ru-RU', { weekday: 'long' });
      speak(`–°–µ–≥–æ–¥–Ω—è ${day}`);
      toast({ title: 'üé§ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', description: day });
    }
    
    if (command.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') || command.includes('—Å–∏—Å—Ç–µ–º–∞')) {
      speak(`–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ ${systemStats.cpu} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ ${systemStats.ram} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤`);
      toast({ title: 'üé§ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', description: `CPU: ${systemStats.cpu}%, RAM: ${systemStats.ram}%` });
    }

    if (command.includes('–ø–æ–º–æ—â—å') || command.includes('—Å–ø—Ä–∞–≤–∫–∞') || command.includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å')) {
      speak('–Ø –º–æ–≥—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ–≥–æ–¥—É. –°–∫–∞–∂–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É');
      toast({ title: 'üé§ –°–ø—Ä–∞–≤–∫–∞', description: '–î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã: –æ—Ç–∫—Ä—ã—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å, –≤–∫–ª—é—á–∏—Ç—å, –≤—ã–∫–ª—é—á–∏—Ç—å, –≤—Ä–µ–º—è, –ø–æ–≥–æ–¥–∞' });
    }

    if (command.includes('–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫')) {
      speak('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å–∏—Å—Ç–µ–º—É');
      toast({ title: 'üé§ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã' });
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    }

    if (command.includes('–æ—á–∏—Å—Ç–∏ —ç–∫—Ä–∞–Ω')) {
      setActiveWindow(null);
      speak('–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω');
      toast({ title: 'üé§ –≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω' });
    }
  };

  useEffect(() => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      return;
    }

    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'ru-RU';

    recognition.onresult = (event: any) => {
      const transcript = Array.from(event.results)
        .map((result: any) => result[0])
        .map((result: any) => result.transcript)
        .join('');
      
      setVoiceTranscript(transcript);
      
      if (event.results[event.results.length - 1].isFinal) {
        processVoiceCommand(transcript.toLowerCase());
      }
    };

    recognition.onerror = () => {
      setIsListening(false);
    };

    recognition.onend = () => {
      if (isListening) {
        recognition.start();
      }
    };

    if (isListening) {
      recognition.start();
    } else {
      recognition.stop();
    }

    return () => {
      recognition.stop();
    };
  }, [isListening]);
};
